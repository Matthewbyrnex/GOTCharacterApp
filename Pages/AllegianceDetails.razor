@page "/allegiance-details"
@using GOTCharacterApp.Services
@using GOTCharacterApp.Models
@inject GOTService GotService
@inject NavigationManager NavigationManager

<style>
    body {
        background-color: #131313;
        color: #ddd;
        font-family: 'Open Sans', sans-serif;
    }

    .card {
        background-color: #222;
        color: #ddd;
        border: none;
    }

    .card-text {
        margin-bottom: 0.5rem; 
    }

    .card-text strong {
        color: #aaa; 
        margin-right: 5px; 
    }

    .card-text span {
        color: #ddd; 
    }

    .card-header {
        background-color: #5c2a2a;
        color: #fff;
        padding: 1rem;
        border-bottom: 3px solid #3a0647; 
    }

    .card-header h2 {
        margin: 0; 
        font-size: 1.75rem; 
        font-weight: bold; 
        text-transform: uppercase; 
        letter-spacing: 2px; 
    }
    .card-title {
        color: #fff; /
        font-size: 1.5rem; 
        font-weight: 600; 
        margin-bottom: 1rem; 
        text-shadow: 1px 1px 2px #000; 
    }

    .card-body {
        padding: 2rem;
    }

    .character-list {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .character-item {
        background-color: #333;
        border-radius: 5px;
        padding: 10px;
        color: #ddd;
    }

    .center-button {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .btn-primary {
        background-color: #5c2a2a;
        border: 1px solid #3a0647;
        color: #fff;
    }

    .btn-primary:hover {
        background-color: #3a0647;
    }

    .alert {
        background-color: #561213;
        color: #fff;
        border: none;
        border-radius: 0;
        padding: 1rem 2rem;
    }
</style>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else if (allegianceDetails != null)
{
    <div class="container mt-3">
        <div class="card">
            <div class="card-header">
                <h2>@allegianceDetails.Name</h2>
            </div>
            <div class="card-body">
                <h5 class="card-title">@allegianceDetails.Words</h5>
                <p class="card-text"><strong>Region:</strong> @(string.IsNullOrEmpty(allegianceDetails.Region) ? "Unknown" : allegianceDetails.Region)</p>
                <p class="card-text"><strong>Coat of Arms:</strong> @(string.IsNullOrEmpty(allegianceDetails.CoatOfArms) ? "Unknown" : allegianceDetails.CoatOfArms)</p>
                <p class="card-text"><strong>Titles:</strong> @(allegianceDetails.Titles != null && allegianceDetails.Titles.Any() ? string.Join(", ", allegianceDetails.Titles) : "Unknown")</p>
                <p class="card-text"><strong>Seats:</strong> @(allegianceDetails.Seats != null && allegianceDetails.Seats.Any() ? string.Join(", ", allegianceDetails.Seats) : "Unknown")</p>
                <p class="card-text"><strong>Current Lord:</strong> @(string.IsNullOrEmpty(currentLordName) ? "Unknown" : currentLordName)</p>
                <p class="card-text"><strong>Heir:</strong> @(string.IsNullOrEmpty(heirName) ? "Unknown" : heirName)</p>
                <p class="card-text"><strong>Overlord:</strong> @(string.IsNullOrEmpty(overlordName) ? "Unknown" : overlordName)</p>
                <p class="card-text"><strong>Founded:</strong> @(string.IsNullOrEmpty(allegianceDetails.Founded) ? "Unknown" : allegianceDetails.Founded)</p>
                <p class="card-text"><strong>Founder:</strong> @(string.IsNullOrEmpty(founderName) ? "Unknown" : founderName)</p>
                <p class="card-text"><strong>Died Out:</strong> @(string.IsNullOrEmpty(allegianceDetails.DiedOut) ? "Unknown" : allegianceDetails.DiedOut)</p>
                <p class="card-text"><strong>Ancestral Weapons:</strong></p>
                <div>
                    @if (allegianceDetails.AncestralWeapons != null && allegianceDetails.AncestralWeapons.Any())
                    {
                        @foreach (var weapon in allegianceDetails.AncestralWeapons)
                        {
                            <p>@weapon</p>
                        }
                    }
                    else
                    {
                        <p>Unknown</p>
                    }
                </div>

                <p class="card-text"><strong>Cadet Branches:</strong></p>
                <div>
                    @if (cadetBranchesDetails != null && cadetBranchesDetails.Any())
                    {
                        @foreach (var cadetBranch in cadetBranchesDetails)
                        {
                            <p>@cadetBranch.Name</p>
                        }
                    }
                    else
                    {
                        <p>Unknown</p>
                    }
                </div>
                <p class="card-text"><strong>Sworn Members:</strong></p>
                <div class="character-list">
                    @foreach (var memberName in swornMemberNames)
                    {
                        <div class="character-item">
                            @(string.IsNullOrEmpty(memberName) ? "Unknown" : memberName)
                        </div>
                    }
                </div>
                @if (showLoadMore)
                {
                    <div class="center-button mt-3"> <!-- Center button and add margin on top -->
                        <button @onclick="LoadMoreSwornMembers" class="btn btn-primary">Load More</button>
                    </div>
                }
            </div>
        </div>
        <div class="card-footer text-center">
                            <button class="btn btn-secondary" @onclick="NavigateToCharacters">
                                Return to All Characters
                            </button>
                        </div>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter] public string url { get; set; }
    private House allegianceDetails;
    private bool isLoading = true;
    private string errorMessage;
    private List<string> swornMemberNames = new List<string>();
    private int swornMembersToShow = 20;
    private bool showLoadMore = false;

    // New fields to store character information
    private string currentLordName;
    private string heirName;
    private string overlordName;
    private string founderName;
    private List<House> cadetBranchesDetails = new List<House>();

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            // Parse the URL from the query string
            var uri = new Uri(NavigationManager.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            var houseUrl = query["url"];
            if (!string.IsNullOrWhiteSpace(houseUrl))
            {
                allegianceDetails = await GotService.GetHouseByUrlAsync(houseUrl);

                // Fetch character information for Current Lord, Heir, Overlord, and Founder
                currentLordName = await GetCharacterName(allegianceDetails.CurrentLord);
                heirName = await GetCharacterName(allegianceDetails.Heir);
                overlordName = await GetCharacterName(allegianceDetails.Overlord);
                founderName = await GetCharacterName(allegianceDetails.Founder);

                // Fetch Cadet Branches details
                cadetBranchesDetails = await GetCadetBranchesDetails(allegianceDetails.CadetBranches);

                await LoadSwornMembers();
            }
            else
            {
                errorMessage = "No URL provided for the house details.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading house details: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<List<House>> GetCadetBranchesDetails(List<string> cadetBranchUrls)
    {
        var cadetBranchDetails = new List<House>();
        foreach (var cadetBranchUrl in cadetBranchUrls)
        {
            var house = await GotService.GetHouseByUrlAsync(cadetBranchUrl);
            if (house != null)
            {
                cadetBranchDetails.Add(house);
            }
        }
        return cadetBranchDetails;
    }

    private async Task<string> GetCharacterName(string characterUrl)
    {
        if (!string.IsNullOrWhiteSpace(characterUrl))
        {
            var (Id, Name) = await GotService.GetCharacterNameByUrlAsync(characterUrl);
            if (!string.IsNullOrWhiteSpace(Name))
            {
                return Name;
            }
        }
        return "Unknown";
    }

    private async Task LoadSwornMembers()
    {
        if (allegianceDetails?.SwornMembers != null)
        {
            var initialSwornMembers = allegianceDetails.SwornMembers.Take(swornMembersToShow).ToList();
            foreach (var memberUrl in initialSwornMembers)
            {
                var memberName = await GetCharacterName(memberUrl);
                swornMemberNames.Add(memberName);
            }

            showLoadMore = allegianceDetails.SwornMembers.Count > swornMembersToShow;
        }
        isLoading = false;
    }

    private async Task LoadMoreSwornMembers()
    {
        var remainingSwornMembers = allegianceDetails.SwornMembers.Skip(swornMemberNames.Count).Take(swornMembersToShow).ToList();
        foreach (var memberUrl in remainingSwornMembers)
        {
            var memberName = await GetCharacterName(memberUrl);
            swornMemberNames.Add(memberName);
        }

        showLoadMore = allegianceDetails.SwornMembers.Count > swornMemberNames.Count;
    }

    private void NavigateToCharacters()
    {
        NavigationManager.NavigateTo("/characters");
    }
}
